<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>REST</title>
      <link href="/2022/03/10/REST/"/>
      <url>/2022/03/10/REST/</url>
      
        <content type="html"><![CDATA[<h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><pre class="line-numbers language-none"><code class="language-none">const express &#x3D; require(&#39;express&#39;);const app &#x3D; express();const port &#x3D; 3000;app.get(&#39;&#x2F;&#39;, (req, res) &#x3D;&gt; &#123;  res.send(&#39;Hello World!&#39;);&#125;);app.listen(port, () &#x3D;&gt; &#123;  console.log(&#96;Example app listening at http:&#x2F;&#x2F;localhost:$&#123;port&#125;&#96;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Wikipedia-Style-API"><a href="#Wikipedia-Style-API" class="headerlink" title="Wikipedia Style API"></a>Wikipedia Style API</h2><pre class="line-numbers language-none"><code class="language-none">const express &#x3D; require(&quot;express&quot;);const bodyParser &#x3D; require(&quot;body-parser&quot;);const ejs &#x3D; require(&quot;ejs&quot;);const mongoose &#x3D; require(&#39;mongoose&#39;);const app &#x3D; express();app.set(&#39;view engine&#39;, &#39;ejs&#39;);app.use(bodyParser.urlencoded(&#123;  extended: true&#125;));app.use(express.static(&quot;public&quot;));mongoose.connect(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;wikiDB&quot;, &#123;useNewUrlParser: true&#125;);const articleSchema &#x3D; &#123;  title: String,  content: String&#125;;const Article &#x3D; mongoose.model(&quot;Article&quot;, articleSchema);&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;Requests Targetting all Articles&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;app.route(&quot;&#x2F;articles&quot;).get(function(req, res)&#123;  Article.find(function(err, foundArticles)&#123;    if (!err) &#123;      res.send(foundArticles);    &#125; else &#123;      res.send(err);    &#125;  &#125;);&#125;).post(function(req, res)&#123;  const newArticle &#x3D; new Article(&#123;    title: req.body.title,    content: req.body.content  &#125;);  newArticle.save(function(err)&#123;    if (!err)&#123;      res.send(&quot;Successfully added a new article.&quot;);    &#125; else &#123;      res.send(err);    &#125;  &#125;);&#125;).delete(function(req, res)&#123;  Article.deleteMany(function(err)&#123;    if (!err)&#123;      res.send(&quot;Successfully deleted all articles.&quot;);    &#125; else &#123;      res.send(err);    &#125;  &#125;);&#125;);&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;Requests Targetting A Specific Article&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;app.route(&quot;&#x2F;articles&#x2F;:articleTitle&quot;).get(function(req, res)&#123;  Article.findOne(&#123;title: req.params.articleTitle&#125;, function(err, foundArticle)&#123;    if (foundArticle) &#123;      res.send(foundArticle);    &#125; else &#123;      res.send(&quot;No articles matching that title was found.&quot;);    &#125;  &#125;);&#125;).put(function(req, res)&#123;  Article.update(    &#123;title: req.params.articleTitle&#125;,    &#123;title: req.body.title, content: req.body.content&#125;,    &#123;overwrite: true&#125;,    function(err)&#123;      if(!err)&#123;        res.send(&quot;Successfully updated the selected article.&quot;);      &#125;    &#125;  );&#125;).patch(function(req, res)&#123;  Article.update(    &#123;title: req.params.articleTitle&#125;,    &#123;$set: req.body&#125;,    function(err)&#123;      if(!err)&#123;        res.send(&quot;Successfully updated article.&quot;);      &#125; else &#123;        res.send(err);      &#125;    &#125;  );&#125;).delete(function(req, res)&#123;  Article.deleteOne(    &#123;title: req.params.articleTitle&#125;,    function(err)&#123;      if (!err)&#123;        res.send(&quot;Successfully deleted the corresponding article.&quot;);      &#125; else &#123;        res.send(err);      &#125;    &#125;  );&#125;);app.listen(3000, function() &#123;  console.log(&quot;Server started on port 3000&quot;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB</title>
      <link href="/2022/03/10/MongoDB/"/>
      <url>/2022/03/10/MongoDB/</url>
      
        <content type="html"><![CDATA[<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>MongoDB is a source-available cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with optional schemas. MongoDB is developed by MongoDB Inc. and licensed under the Server Side Public License (SSPL).</p><h2 id="To-Do-List-Application"><a href="#To-Do-List-Application" class="headerlink" title="To Do List Application"></a>To Do List Application</h2><pre class="line-numbers language-none"><code class="language-none">const express &#x3D; require(&quot;express&quot;);const bodyParser &#x3D; require(&quot;body-parser&quot;);const mongoose &#x3D; require(&quot;mongoose&quot;);const _ &#x3D; require(&quot;lodash&quot;);const app &#x3D; express();app.set(&#39;view engine&#39;, &#39;ejs&#39;);app.use(bodyParser.urlencoded(&#123;extended: true&#125;));app.use(express.static(&quot;public&quot;));mongoose.connect(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;todolistDB&quot;, &#123;useNewUrlParser: true&#125;);const itemsSchema &#x3D; &#123;  name: String&#125;;const Item &#x3D; mongoose.model(&quot;Item&quot;, itemsSchema);const item1 &#x3D; new Item(&#123;  name: &quot;Welcome to your todolist!&quot;&#125;);const item2 &#x3D; new Item(&#123;  name: &quot;Hit the + button to add a new item.&quot;&#125;);const item3 &#x3D; new Item(&#123;  name: &quot;&lt;-- Hit this to delete an item.&quot;&#125;);const defaultItems &#x3D; [item1, item2, item3];const listSchema &#x3D; &#123;  name: String,  items: [itemsSchema]&#125;;const List &#x3D; mongoose.model(&quot;List&quot;, listSchema);app.get(&quot;&#x2F;&quot;, function(req, res) &#123;  Item.find(&#123;&#125;, function(err, foundItems)&#123;    if (foundItems.length &#x3D;&#x3D;&#x3D; 0) &#123;      Item.insertMany(defaultItems, function(err)&#123;        if (err) &#123;          console.log(err);        &#125; else &#123;          console.log(&quot;Successfully savevd default items to DB.&quot;);        &#125;      &#125;);      res.redirect(&quot;&#x2F;&quot;);    &#125; else &#123;      res.render(&quot;list&quot;, &#123;listTitle: &quot;Today&quot;, newListItems: foundItems&#125;);    &#125;  &#125;);&#125;);app.get(&quot;&#x2F;:customListName&quot;, function(req, res)&#123;  const customListName &#x3D; _.capitalize(req.params.customListName);  List.findOne(&#123;name: customListName&#125;, function(err, foundList)&#123;    if (!err)&#123;      if (!foundList)&#123;        &#x2F;&#x2F;Create a new list        const list &#x3D; new List(&#123;          name: customListName,          items: defaultItems        &#125;);        list.save();        res.redirect(&quot;&#x2F;&quot; + customListName);      &#125; else &#123;        &#x2F;&#x2F;Show an existing list        res.render(&quot;list&quot;, &#123;listTitle: foundList.name, newListItems: foundList.items&#125;);      &#125;    &#125;  &#125;);&#125;);app.post(&quot;&#x2F;&quot;, function(req, res)&#123;  const itemName &#x3D; req.body.newItem;  const listName &#x3D; req.body.list;  const item &#x3D; new Item(&#123;    name: itemName  &#125;);  if (listName &#x3D;&#x3D;&#x3D; &quot;Today&quot;)&#123;    item.save();    res.redirect(&quot;&#x2F;&quot;);  &#125; else &#123;    List.findOne(&#123;name: listName&#125;, function(err, foundList)&#123;      foundList.items.push(item);      foundList.save();      res.redirect(&quot;&#x2F;&quot; + listName);    &#125;);  &#125;&#125;);app.post(&quot;&#x2F;delete&quot;, function(req, res)&#123;  const checkedItemId &#x3D; req.body.checkbox;  const listName &#x3D; req.body.listName;  if (listName &#x3D;&#x3D;&#x3D; &quot;Today&quot;) &#123;    Item.findByIdAndRemove(checkedItemId, function(err)&#123;      if (!err) &#123;        console.log(&quot;Successfully deleted checked item.&quot;);        res.redirect(&quot;&#x2F;&quot;);      &#125;    &#125;);  &#125; else &#123;    List.findOneAndUpdate(&#123;name: listName&#125;, &#123;$pull: &#123;items: &#123;_id: checkedItemId&#125;&#125;&#125;, function(err, foundList)&#123;      if (!err)&#123;        res.redirect(&quot;&#x2F;&quot; + listName);      &#125;    &#125;);  &#125;&#125;);app.get(&quot;&#x2F;about&quot;, function(req, res)&#123;  res.render(&quot;about&quot;);&#125;);app.listen(3000, function() &#123;  console.log(&quot;Server started on port 3000&quot;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React.js</title>
      <link href="/2022/03/10/React-js/"/>
      <url>/2022/03/10/React-js/</url>
      
        <content type="html"><![CDATA[<h2 id="Keeper-App"><a href="#Keeper-App" class="headerlink" title="Keeper App"></a>Keeper App</h2><pre class="line-numbers language-none"><code class="language-none">import React, &#123; useState &#125; from &quot;react&quot;;import Header from &quot;.&#x2F;Header&quot;;import Footer from &quot;.&#x2F;Footer&quot;;import Note from &quot;.&#x2F;Note&quot;;import CreateArea from &quot;.&#x2F;CreateArea&quot;;function App() &#123;  const [notes, setNotes] &#x3D; useState([]);  function addNote(newNote) &#123;    setNotes(prevNotes &#x3D;&gt; &#123;      return [...prevNotes, newNote];    &#125;);  &#125;  function deleteNote(id) &#123;    setNotes(prevNotes &#x3D;&gt; &#123;      return prevNotes.filter((noteItem, index) &#x3D;&gt; &#123;        return index !&#x3D;&#x3D; id;      &#125;);    &#125;);  &#125;  return (    &lt;div&gt;      &lt;Header &#x2F;&gt;      &lt;CreateArea onAdd&#x3D;&#123;addNote&#125; &#x2F;&gt;      &#123;notes.map((noteItem, index) &#x3D;&gt; &#123;        return (          &lt;Note            key&#x3D;&#123;index&#125;            id&#x3D;&#123;index&#125;            title&#x3D;&#123;noteItem.title&#125;            content&#x3D;&#123;noteItem.content&#125;            onDelete&#x3D;&#123;deleteNote&#125;          &#x2F;&gt;        );      &#125;)&#125;      &lt;Footer &#x2F;&gt;    &lt;&#x2F;div&gt;  );&#125;export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>API</title>
      <link href="/2022/03/10/API/"/>
      <url>/2022/03/10/API/</url>
      
        <content type="html"><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>An application programming interface (API) is a connection between computers or between computer programs. It is a type of software interface, offering a service to other pieces of software. A document or standard that describes how to build or use such a connection or interface is called an API specification. A computer system that meets this standard is said to implement or expose an API. The term API may refer either to the specification or to the implementation. (From Wikipedia)</p><h2 id="Newsletter-subscription-application"><a href="#Newsletter-subscription-application" class="headerlink" title="Newsletter subscription application"></a>Newsletter subscription application</h2><pre class="line-numbers language-none"><code class="language-none">const express &#x3D; require(&quot;express&quot;);const bodyParser &#x3D; require(&quot;bodyParser&quot;);const request &#x3D; require(&quot;request&quot;);const app &#x3D; express();app.use(express.static(&quot;public&quot;));app.use(bodyParser.urlencoded(&#123;extended: true&#125;));app.get(&quot;&#x2F;&quot;, function(req, res) &#123;  res.sendFile(__dirname + &quot;&#x2F;signup.html&quot;);&#125;);app.post(&quot;&#x2F;&quot;, function(req, res)) &#123;  const firstName &#x3D; req.body.fName;  const lastName &#x3D; req.body.lName;  const email &#x3D; req.body.email;  const data &#x3D; &#123;    members: [      &#123;        email_address: email,        status: &quot;subscribed&quot;,        merge_fields: &#123;          FNAME: firstName,          LNAME: lastName        &#125;      &#125;    ]  &#125;;  const jsonData &#x3D; JSON.stingify(data);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
